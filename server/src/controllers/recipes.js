import mongoose from "mongoose";
import { RecipeModel } from "../models/Recipes.js";
import { UserModel } from "../models/Users.js";

export const getAllRecipes = async (req, res) => {
  try {
    //GETS ALL RECIPES. THE FIND({}) IS CALLED WITH AN EMPTY OBJECT WHICH MEANS IT WILL MATCH WITH EVERY RECIPE
    //RecieModel IS DECLATED AT THE BOTTOM OF THE RECIPE MODEL. IT IS THE PART CONNECTED TO MONGO DB
    const result = await RecipeModel.find({});
    res.status(200).json(result);
  } catch (err) {
    res.status(500).json(err);
  }
};

export const createRecipe = async (req, res) => {
  //CREATES A NEW RECIPEMODEL INSTANCE USING THE REQ
  const recipe = new RecipeModel({
    //ID IS SET TO A NEW ObjectId GENERATED BY MONGOOSE AND THE OTHER FIELDS ARE SET TO THE REQ.BODY
    _id: new mongoose.Types.ObjectId(),
    name: req.body.name,
    image: req.body.image,
    ingredients: req.body.ingredients,
    instructions: req.body.instructions,
    imageUrl: req.body.imageUrl,
    cookingTime: req.body.cookingTime,
    userOwner: req.body.userOwner,
  });

  try {
    //TRYS TO SAVE THE NEW RECIPE TO THE DATABSE
    const result = await recipe.save();
    //RES THAT SENDS BACK STATUS 201 AND A JSON OBJECT WITH THE NEW RECIPE
    res.status(201).json({
      createdRecipe: {
        name: result.name,
        image: result.image,
        ingredients: result.ingredients,
        instructions: result.instructions,
        _id: result._id,
      },
    });
  } catch (err) {
    res.status(500).json(err);
  }
};

export const getRecipeById = async (req, res) => {
  try {
    //ATTEMPTS TO FIND A RECIPE IN THE RECIPEMODEL WITH THE PROVIDED RECIPEID
    const result = await RecipeModel.findById(req.params.recipeId);
    //RES WITH JSON OBJECT OF THE RECIPE
    res.status(200).json(result);
  } catch (err) {
    res.status(500).json(err);
  }
};

export const saveRecipe = async (req, res) => {
  const recipe = await RecipeModel.findById(req.body.recipeID);
  const user = await UserModel.findById(req.body.userID);
  try {
    //PUSHES THE SAVED RECIPE TO THE USERS SAVED RECIPES
    user.savedRecipes.push(recipe);
    //THE NEW PUSH IS SAVED TO THE DATABASE
    await user.save();
    //SENDS THE NEW SAVED RECIPES ARRAY IN JSON FORMAT
    res.status(201).json({ savedRecipes: user.savedRecipes });
  } catch (err) {
    res.status(500).json(err);
  }
};

export const getSavedRecipeIds = async (req, res) => {
  try {
    //TRYS TO FIND A USER IN THE USERMODEL WITH THE PROVIDED ID
    const user = await UserModel.findById(req.params.userId);
    //IF FOUND IT SENDS A RES WITH THE STATUS 201 AND A JSON OBJECT WITH THE SAVED RECIPE IDS
    res.status(201).json({ savedRecipes: user?.savedRecipes });
  } catch (err) {
    res.status(500).json(err);
  }
};

export const getSavedRecipes = async (req, res) => {
  try {
    //TRYS TO FIND A USER IN THE USERMODEL WITH THE PROVIDED ID
    const user = await UserModel.findById(req.params.userId);
    //ATTEMPTS TO FIND ALL RECIPES IN RECIPE MODEL WITH _ID VALUES THAT MATCH THE USERS SAVED RECIPE IDs
    const savedRecipes = await RecipeModel.find({
      _id: { $in: user.savedRecipes },
    });
    //RES WITH A JSON OBJECT OF THE SAVED RECIPES
    res.status(201).json({ savedRecipes });
  } catch (err) {
    res.status(500).json(err);
  }
};
